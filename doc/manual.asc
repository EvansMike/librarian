= Manual for Librarian

Last update: 2022-06-07

Including User Manual and Technical Notes



== Introduction

The Librarian in a python application for storing the contents of your book library using a web-cam to scan the ISBN code.  It also tracks loaned out books.  (Which was the original purpose as I often loan books and never see them again).  Provided an internet connection is available the ISBN is looked up in a database and the book details returned.  Books can be also added manually.  Back end storage uses a MySQL (or sqlite3 if the queries are updated but these are currently way out of sync. with the MySQL.) database.  It is not a polished product but serves my needs well. It is improving slowly.



== Setup for testing

Unzip all the files into a suitable directory.  Make sure the python files are executable using chmod +x *.py.  Create the database using the command "mysql dbname [-p] < database.schema.sql".

Run the application with:

[source, bash]
python -m src.librarian

On first run a dummy .librarian.cnf file is created in your $(HOME) directory.  This will have to edited to reference your newly created database and any other settings required.
Olnly the [database] section is required to run the application.
On second run the program should connect to the database successfully.  If not check your connection details.  Some additional Python libraries will be required to run the application, these are listed in Requirements.txt.



== The Configuration File

Only the database section is required.
Other sections are either obsolete or optional but left in for backwards compatibility.
The obsolete sections

Sections in the config:

- amazon_aws is no longer used for lookups, better (more accessible) options are now available.
- UPCdatabase is no longer used for lookups so a key is not required.
- Calibre books are no longer included in the listing. Calibre does a fine job on it's own.
- qr_code Was going to be for printing QR labels, then I decided there was no point. Books already have a barcode, right!

Fields:

- BOOKMARKS = 1/0 Whether to open the bookmark print dialog after closing the edit dialog.
- LIBRARIAN = Your Name. This gets assigned to the owner field in the book and gets printed on the bookmark. This was the login user name which I found unsatisfactory.
- USE = mysql or sqlite.  Don't use sqlite the query file is way out of date. This setting is currently ignored for that very reason. TODO.
- LITE_DB = The name of the sqllite3 database. See above.



== Usage

Install with:

[source, bash]
pip install .

Start librarian from the command line.  A list of stored books is displayed with sortable columns and a tool menu.  Initially of course your book list be empty and you will need to add some books.



== Adding a Book by Scanning with a Camera

You will need to have a web-cam plugged in and set to focus quite close, 6” to 8” perhaps.
Click the “Scan New” to open a dialogue window.
Press the scan button and a camera window will appear, this can be used to focus and position the camera.
As soon as the bar-code is acquired the camera window will close and the book details should appear in the Window.
Clicking the “EDIT” button will open the edit dialog, from here you can update the details and add the book.
Closing the window will reveal the book added to the book list.
It is of course possible to own more than one copy of a book.
Scanning a book twice will add a warning that you already own the book and you have to option to add the book or not.



=== Adding a Book by Scanning with a Real Scanner

Plug in a USB barcode scanner. I use a Wasp scanner and had to create a file: /etc/udev/rules.d/101-zebra-scanner-corescanner.rules with the content:

[source, bash]
ATTRS{idVendor}=="05e0", ATTRS{idProduct}=="0800", ENV{ID_MM_DEVICE_IGNORE}="1" , GROUP="dialout"

Add yourself to the dialout group. Or, I guess, change the GROUP in the file.

Press SCAN NEW as above.
The scan button should be disable and simply using the scanner as normal will cause a book lookup.
Proceed as before.



=== Adding a Book Manually

Books can be added manually by filling in the fields in the query window and clicking the  NEW BOOK button.  If a current book's details are already displayed, use the "CLEAR" button to clear all the fields prior to entering a new book's details.
Using "CLEAR" creates a NEW book.
If you have an ISBN fill in the ISBN field and press "ISBN SEARCH" button to do an internet search that will fill in the remaining fields.
Pressing the "UPDATE" button will insert the data into the database.
Pressing the "CLOSE" button will prompt to save the data if you have done this already.

The other fields:

- Value. A rating from 0 to 5 of the price of the book. Or perhaps how you value the book.
- Copies. will be auto-filled and is based on searching the DB for the ISBN.
- Owner. I use this if I've borrowed the book from someone else.
- Star Rating. Is it a good book?
- Locations. Which room, shelf? It's up to you to populate this drop down with the ADD button.
- Borrowed. When you lend a book, fill this is in. Use ADD to add a borrower.



=== Editing a Book's Details

when in list view you can edit a bok by double clicking or selecting QUERY from the LH menu, having previously seleted the book in the list. This will open a new window where edits can be made. The UPDATE button saves the new details to the database. Closing this window without UPDATE will pop up a prompt to save the changes.



=== Lending a Book

To lend a book you need to add a borrower.  This is done in the query window.  Double click the book the book you wish to lend, or select and click QUERY to open the query window.  If the borrower is not in the drop down list of borrowers, click the ADD button to open the add borrower window.  Fill in the details and click OK.
Once a borrower has been inserted you can lend a book.  Select the book and click on “QUERY” to open a query window.  Select the borrowers name from the drop-down list and click the borrowed button.  Close the window.  Now clicking the “BORROWED” button in the main window will display a list of borrowed books.  In addition, books you have been lent are also listed along with the name of the person you borrowed it from.

If you have a receipt printer set up you can print out a bookmark to insert into the book.
This will serve to remind the borrower to return the book as it will have the borrowed date printed on it.
Printing on portrait A5 paper and folding that in half will also provide you with a bookmark.
This can be used to make note on too.



=== Returned Borrowed Books

Once a borrower returns a book, select the book in the main window and click ”QUERY”.  The borrowed will be shown checked and name of the borrower will be in the drop-down list window.  Simply press the borrowed button to un-check it and close the window.  The book will no longer be in the borrowed list. 

If you return a book to a lender simply remove the book from your database using the query window and the "REMOVE" button



=== Removing a Book

Physically disposing of a book, I know it hard but sometime you have to, means you need to remove it from your catalogue.
Double click on the book, or press "QUERY" to open the edit dialog.
Press the "REMOVE" button, you will be asked if you are sure, then press "CLOSE".
This action fills in the 'disposal_date' field in the books table with the current timestamp.
The data are not deleted, this information may be useful at some time, but the book will not now show up in your listing.

NOTE: A charity shop worker tells me that these days, due to privacy laws (GDPR), they are not allowed to sell books with any personal information in them.
    This means that if you write your name in the front, as I do (or did) then those book go for pulping.
    Using the bookmark print facility lets you claim ownership of the book without consigning it to the paper mill, or worse land-fill.
    If you've had ex-partners you know what I'm talking about regarding marking your books.
    Personally I love to buy used books that have some personal narrative, even if it's just the previous owner's name.

    

== Printing the Book List

If you require a printout of your book listing, "PRINT LIST" will output a PDF file of the entire listing.



== The Technical(ish) Part

Some introduction goes here.


=== Database

The book table is somewhat flatter than I originally envisaged.
Since each book is a physical thing I flattened it because I could see no great advantage in further normalisation.

[source, MySQL]
Table, books
+---------------+---------------+------+-----+---------+----------------+
| Field         | Type          | Null | Key | Default | Extra          |
+---------------+---------------+------+-----+---------+----------------+
| id            | int(11)       | NO   | PRI | NULL    | auto_increment |
| title         | text          | YES  |     | NULL    |                |
| author        | text          | YES  |     | NULL    |                |
| isbn          | text          | YES  |     | NULL    |                |
| cover         | text          | YES  |     | NULL    |                |
| location      | int(11)       | YES  |     | NULL    |                |
| p_date        | date          | YES  |     | NULL    |                |
| city          | text          | YES  |     | NULL    |                |
| publisher     | text          | YES  |     | NULL    |                |
| abstract      | text          | YES  |     | NULL    |                |
| year          | int(11)       | YES  |     | NULL    |                |
| mtype         | text          | YES  |     | NULL    |                |
| author_id     | int(11)       | YES  |     | NULL    |                |
| add_date      | datetime      | YES  |     | NULL    |                |
| sale_status   | int(11)       | YES  |     | NULL    |                |
| price         | decimal(10,2) | YES  |     | NULL    |                |
| borrower_id   | int(11)       | YES  |     | NULL    |                |
| owner         | varchar(60)   | YES  |     | NULL    |                |
| rating        | int(11)       | YES  |     | 0       |                |
| value         | int(11)       | YES  |     | 0       |                |
| disposal_date | datetime      | YES  |     | NULL    |                |
+---------------+---------------+------+-----+---------+----------------+

Borrowers and location are separate tables.

Authors table is populated on insert book but is not linked to author_id as it should be.
I forget why not. Probably lazyness.

What could probably be normalised out are:

- owner. Definitely should be. Users and borrowers tables should be rationalised to users table.
- author. It is kinda but it also exists here as a test field. See author_id though.
- mtype
- city

However no great efficiency will be gained and no meaningful data mining is likely with this dataset.
So I didn't bother.

There are fields already in there that are not exposed in the librarian interface.
I was going to use these for a separate book-selling application when I had dreams of owning a bookshop.
This also explains why I own the receipt printer I use for printing bookmarks.

A full UML of the DB schema is in this directory.
These may, or may not be up-to-date.
The other tables are trivial and should be self explanatory.



== The API and Android App

There is an API that worked with a simple Android app to display a simple list of books, written in php.
This was also intended to provide a means to add books using a smartphone to scan barcodes.
Personally I have no need so it's been abandoned as far as development is concerned.
It's not on GitHub because it's also insecure as it stands.



== Finally

This document is written with asciidoc markup and is meant to be typeset as a PDF using the following

[source, bash]
a2x -fpdf --fop  manual.asc
